// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/popeskul/mailflow/user-service/internal/queue (interfaces: Queue)
//
// Generated by this command:
//
//	mockgen -destination=mocks/mock_queue.go -package=mocks github.com/popeskul/mailflow/user-service/internal/queue Queue
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/popeskul/mailflow/user-service/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockQueue is a mock of Queue interface.
type MockQueue struct {
	ctrl     *gomock.Controller
	recorder *MockQueueMockRecorder
	isgomock struct{}
}

// MockQueueMockRecorder is the mock recorder for MockQueue.
type MockQueueMockRecorder struct {
	mock *MockQueue
}

// NewMockQueue creates a new mock instance.
func NewMockQueue(ctrl *gomock.Controller) *MockQueue {
	mock := &MockQueue{ctrl: ctrl}
	mock.recorder = &MockQueueMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueue) EXPECT() *MockQueueMockRecorder {
	return m.recorder
}

// Enqueue mocks base method.
func (m *MockQueue) Enqueue(email *domain.Email) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Enqueue", email)
	ret0, _ := ret[0].(error)
	return ret0
}

// Enqueue indicates an expected call of Enqueue.
func (mr *MockQueueMockRecorder) Enqueue(email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Enqueue", reflect.TypeOf((*MockQueue)(nil).Enqueue), email)
}

// Size mocks base method.
func (m *MockQueue) Size() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size.
func (mr *MockQueueMockRecorder) Size() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockQueue)(nil).Size))
}

// Start mocks base method.
func (m *MockQueue) Start(ctx context.Context, processor func(*domain.Email) error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start", ctx, processor)
}

// Start indicates an expected call of Start.
func (mr *MockQueueMockRecorder) Start(ctx, processor any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockQueue)(nil).Start), ctx, processor)
}

// Stop mocks base method.
func (m *MockQueue) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockQueueMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockQueue)(nil).Stop))
}
