// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/popeskul/mailflow/email-service/pkg/api/email/v1 (interfaces: EmailServiceClient)
//
// Generated by this command:
//
//	mockgen -destination=mocks/mock_email_client.go -package=mocks github.com/popeskul/mailflow/email-service/pkg/api/email/v1 EmailServiceClient
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	emailv1 "github.com/popeskul/mailflow/email-service/pkg/api/email/v1"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockEmailServiceClient is a mock of EmailServiceClient interface.
type MockEmailServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockEmailServiceClientMockRecorder
	isgomock struct{}
}

// MockEmailServiceClientMockRecorder is the mock recorder for MockEmailServiceClient.
type MockEmailServiceClientMockRecorder struct {
	mock *MockEmailServiceClient
}

// NewMockEmailServiceClient creates a new mock instance.
func NewMockEmailServiceClient(ctrl *gomock.Controller) *MockEmailServiceClient {
	mock := &MockEmailServiceClient{ctrl: ctrl}
	mock.recorder = &MockEmailServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmailServiceClient) EXPECT() *MockEmailServiceClientMockRecorder {
	return m.recorder
}

// GetEmailStatus mocks base method.
func (m *MockEmailServiceClient) GetEmailStatus(ctx context.Context, in *emailv1.GetEmailStatusRequest, opts ...grpc.CallOption) (*emailv1.GetEmailStatusResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEmailStatus", varargs...)
	ret0, _ := ret[0].(*emailv1.GetEmailStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmailStatus indicates an expected call of GetEmailStatus.
func (mr *MockEmailServiceClientMockRecorder) GetEmailStatus(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmailStatus", reflect.TypeOf((*MockEmailServiceClient)(nil).GetEmailStatus), varargs...)
}

// ListEmails mocks base method.
func (m *MockEmailServiceClient) ListEmails(ctx context.Context, in *emailv1.ListEmailsRequest, opts ...grpc.CallOption) (*emailv1.ListEmailsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEmails", varargs...)
	ret0, _ := ret[0].(*emailv1.ListEmailsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEmails indicates an expected call of ListEmails.
func (mr *MockEmailServiceClientMockRecorder) ListEmails(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEmails", reflect.TypeOf((*MockEmailServiceClient)(nil).ListEmails), varargs...)
}

// SendEmail mocks base method.
func (m *MockEmailServiceClient) SendEmail(ctx context.Context, in *emailv1.SendEmailRequest, opts ...grpc.CallOption) (*emailv1.SendEmailResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendEmail", varargs...)
	ret0, _ := ret[0].(*emailv1.SendEmailResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendEmail indicates an expected call of SendEmail.
func (mr *MockEmailServiceClientMockRecorder) SendEmail(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEmail", reflect.TypeOf((*MockEmailServiceClient)(nil).SendEmail), varargs...)
}
