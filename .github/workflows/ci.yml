name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, email ]
  pull_request:
    branches: [ main, develop, email ]

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24'
        
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Install dependencies
      run: |
        go install github.com/golangci/golangci-lint/cmd/golangci-lint@v1.64.8
        go install github.com/bufbuild/buf/cmd/buf@latest
    
    - name: Lint Go code (workspace aware)
      run: |
        # Lint each module separately since we use go.work
        echo "Linting user-service..."
        cd user-service && golangci-lint run ./... --timeout=5m || echo "user-service linting failed"
        cd ..
        
        echo "Linting email-service..."
        cd email-service && golangci-lint run ./... --timeout=5m || echo "email-service linting failed"
        cd ..
        
        echo "Linting common..."
        cd common && golangci-lint run ./... --timeout=5m || echo "common linting failed"
        cd ..
    
    - name: Lint protobuf files
      run: |
        buf lint || echo "protobuf linting skipped - no .proto files or buf not configured"
    
    - name: Run unit tests
      run: |
        echo "Running unit tests for each module..."
        cd user-service && go test ./... -v || echo "user-service tests failed/not found"
        cd ../email-service && go test ./... -v || echo "email-service tests failed/not found"
        cd ../common && go test ./... -v || echo "common tests failed/not found"
        cd ..
    
    - name: Check for vulnerabilities
      run: |
        go install golang.org/x/vuln/cmd/govulncheck@latest
        echo "Checking vulnerabilities in user-service..."
        cd user-service && govulncheck ./... || echo "govulncheck failed for user-service"
        cd ../email-service && govulncheck ./... || echo "govulncheck failed for email-service"
        cd ../common && govulncheck ./... || echo "govulncheck failed for common"
        cd ..

  build-and-test:
    runs-on: ubuntu-latest
    needs: lint-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24'
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Install Docker Compose
      run: |
        sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
        docker-compose --version
    
    - name: Build services
      run: |
        echo "Building Docker images..."
        docker-compose build --parallel --no-cache
    
    - name: Start services
      run: |
        echo "Starting services..."
        docker-compose up -d
        echo "Waiting for containers to be ready..."
        sleep 10
        docker-compose ps
        
        # Check if containers are running
        if ! docker-compose ps | grep -q "Up"; then
          echo "Services failed to start properly!"
          docker-compose logs
          exit 1
        fi
        
    - name: Wait for services
      run: |
        echo "Waiting for services to start..."
        sleep 30
        echo "=== Services Status ==="
        docker-compose ps
        echo "=== Service Health Checks ==="
        
        # Check user-service metrics endpoint
        echo "Checking user-service metrics..."
        for i in {1..30}; do
          if curl -f -s http://localhost:9101/metrics >/dev/null; then
            echo "User-service metrics endpoint is ready!"
            break
          fi
          echo "Waiting for user-service metrics... attempt $i/30"
          sleep 2
        done
        
        # Check email-service metrics endpoint  
        echo "Checking email-service metrics..."
        for i in {1..30}; do
          if curl -f -s http://localhost:9102/metrics >/dev/null; then
            echo "Email-service metrics endpoint is ready!"
            break
          fi
          echo "Waiting for email-service metrics... attempt $i/30"
          sleep 2
        done
        
        echo "Services are ready!"
        
    - name: Show service logs on startup
      run: |
        echo "=== Docker Compose Status ==="
        docker-compose ps
        echo "=== User Service Logs ==="
        docker-compose logs user-service | tail -50
        echo "=== Email Service Logs ==="
        docker-compose logs email-service | tail -50
        echo "=== Basic API test ==="
        curl -v http://localhost:9101/metrics | head -10 || echo "User service metrics check"
        curl -v http://localhost:9102/metrics | head -10 || echo "Email service metrics check"
        
    - name: Show service logs on failure
      if: failure()
      run: |
        echo "=== Docker Compose Status ==="
        docker-compose ps
        echo "=== Network Info ==="
        docker network ls
        echo "=== User Service Logs ==="
        docker-compose logs user-service | tail -100
        echo "=== Email Service Logs ==="
        docker-compose logs email-service | tail -100
        echo "=== Direct curl test ==="
        curl -v http://localhost:9101/metrics || echo "User service metrics not accessible"
        curl -v http://localhost:9102/metrics || echo "Email service metrics not accessible"
        
    - name: Cleanup
      if: always()
      run: |
        docker-compose down -v --remove-orphans || true
        docker system prune -f || true

  security-scan:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
