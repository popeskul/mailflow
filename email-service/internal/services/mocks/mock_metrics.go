// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/popeskul/mailflow/email-service/internal/services (interfaces: Metrics)
//
// Generated by this command:
//
//	mockgen -destination=mocks/mock_metrics.go -package=mocks github.com/popeskul/mailflow/email-service/internal/services Metrics
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockMetrics is a mock of Metrics interface.
type MockMetrics struct {
	ctrl     *gomock.Controller
	recorder *MockMetricsMockRecorder
	isgomock struct{}
}

// MockMetricsMockRecorder is the mock recorder for MockMetrics.
type MockMetricsMockRecorder struct {
	mock *MockMetrics
}

// NewMockMetrics creates a new mock instance.
func NewMockMetrics(ctrl *gomock.Controller) *MockMetrics {
	mock := &MockMetrics{ctrl: ctrl}
	mock.recorder = &MockMetricsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetrics) EXPECT() *MockMetricsMockRecorder {
	return m.recorder
}

// ObserveProcessingDuration mocks base method.
func (m *MockMetrics) ObserveProcessingDuration(duration float64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ObserveProcessingDuration", duration)
}

// ObserveProcessingDuration indicates an expected call of ObserveProcessingDuration.
func (mr *MockMetricsMockRecorder) ObserveProcessingDuration(duration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObserveProcessingDuration", reflect.TypeOf((*MockMetrics)(nil).ObserveProcessingDuration), duration)
}

// RecordDowntimePeriod mocks base method.
func (m *MockMetrics) RecordDowntimePeriod() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordDowntimePeriod")
}

// RecordDowntimePeriod indicates an expected call of RecordDowntimePeriod.
func (mr *MockMetricsMockRecorder) RecordDowntimePeriod() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordDowntimePeriod", reflect.TypeOf((*MockMetrics)(nil).RecordDowntimePeriod))
}

// RecordEmailFailed mocks base method.
func (m *MockMetrics) RecordEmailFailed() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordEmailFailed")
}

// RecordEmailFailed indicates an expected call of RecordEmailFailed.
func (mr *MockMetricsMockRecorder) RecordEmailFailed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordEmailFailed", reflect.TypeOf((*MockMetrics)(nil).RecordEmailFailed))
}

// RecordEmailQueued mocks base method.
func (m *MockMetrics) RecordEmailQueued() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordEmailQueued")
}

// RecordEmailQueued indicates an expected call of RecordEmailQueued.
func (mr *MockMetricsMockRecorder) RecordEmailQueued() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordEmailQueued", reflect.TypeOf((*MockMetrics)(nil).RecordEmailQueued))
}

// RecordEmailSent mocks base method.
func (m *MockMetrics) RecordEmailSent() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordEmailSent")
}

// RecordEmailSent indicates an expected call of RecordEmailSent.
func (mr *MockMetricsMockRecorder) RecordEmailSent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordEmailSent", reflect.TypeOf((*MockMetrics)(nil).RecordEmailSent))
}

// RecordRateLimitDelay mocks base method.
func (m *MockMetrics) RecordRateLimitDelay() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordRateLimitDelay")
}

// RecordRateLimitDelay indicates an expected call of RecordRateLimitDelay.
func (mr *MockMetricsMockRecorder) RecordRateLimitDelay() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordRateLimitDelay", reflect.TypeOf((*MockMetrics)(nil).RecordRateLimitDelay))
}

// SetQueueSize mocks base method.
func (m *MockMetrics) SetQueueSize(size int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetQueueSize", size)
}

// SetQueueSize indicates an expected call of SetQueueSize.
func (mr *MockMetricsMockRecorder) SetQueueSize(size any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetQueueSize", reflect.TypeOf((*MockMetrics)(nil).SetQueueSize), size)
}
