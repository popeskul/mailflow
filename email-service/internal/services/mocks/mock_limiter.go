// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/popeskul/mailflow/email-service/internal/services (interfaces: Limiter)
//
// Generated by this command:
//
//	mockgen -destination=mocks/mock_limiter.go -package=mocks github.com/popeskul/mailflow/email-service/internal/services Limiter
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	ratelimiter "github.com/popeskul/ratelimiter"
	gomock "go.uber.org/mock/gomock"
)

// MockLimiter is a mock of Limiter interface.
type MockLimiter struct {
	ctrl     *gomock.Controller
	recorder *MockLimiterMockRecorder
	isgomock struct{}
}

// MockLimiterMockRecorder is the mock recorder for MockLimiter.
type MockLimiterMockRecorder struct {
	mock *MockLimiter
}

// NewMockLimiter creates a new mock instance.
func NewMockLimiter(ctrl *gomock.Controller) *MockLimiter {
	mock := &MockLimiter{ctrl: ctrl}
	mock.recorder = &MockLimiterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLimiter) EXPECT() *MockLimiterMockRecorder {
	return m.recorder
}

// Allow mocks base method.
func (m *MockLimiter) Allow() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Allow")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Allow indicates an expected call of Allow.
func (mr *MockLimiterMockRecorder) Allow() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Allow", reflect.TypeOf((*MockLimiter)(nil).Allow))
}

// AllowN mocks base method.
func (m *MockLimiter) AllowN(n int) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllowN", n)
	ret0, _ := ret[0].(bool)
	return ret0
}

// AllowN indicates an expected call of AllowN.
func (mr *MockLimiterMockRecorder) AllowN(n any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllowN", reflect.TypeOf((*MockLimiter)(nil).AllowN), n)
}

// GetMetrics mocks base method.
func (m *MockLimiter) GetMetrics() ratelimiter.Metrics {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetrics")
	ret0, _ := ret[0].(ratelimiter.Metrics)
	return ret0
}

// GetMetrics indicates an expected call of GetMetrics.
func (mr *MockLimiterMockRecorder) GetMetrics() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetrics", reflect.TypeOf((*MockLimiter)(nil).GetMetrics))
}

// Reset mocks base method.
func (m *MockLimiter) Reset() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Reset")
}

// Reset indicates an expected call of Reset.
func (mr *MockLimiterMockRecorder) Reset() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockLimiter)(nil).Reset))
}

// Wait mocks base method.
func (m *MockLimiter) Wait(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Wait", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Wait indicates an expected call of Wait.
func (mr *MockLimiterMockRecorder) Wait(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wait", reflect.TypeOf((*MockLimiter)(nil).Wait), ctx)
}

// WaitN mocks base method.
func (m *MockLimiter) WaitN(ctx context.Context, n int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitN", ctx, n)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitN indicates an expected call of WaitN.
func (mr *MockLimiterMockRecorder) WaitN(ctx, n any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitN", reflect.TypeOf((*MockLimiter)(nil).WaitN), ctx, n)
}
