// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for GetEmailStatusResponseStatus.
const (
	GetEmailStatusResponseStatusFailed  GetEmailStatusResponseStatus = "failed"
	GetEmailStatusResponseStatusQueued  GetEmailStatusResponseStatus = "queued"
	GetEmailStatusResponseStatusSending GetEmailStatusResponseStatus = "sending"
	GetEmailStatusResponseStatusSent    GetEmailStatusResponseStatus = "sent"
)

// Defines values for SendEmailResponseStatus.
const (
	SendEmailResponseStatusFailed  SendEmailResponseStatus = "failed"
	SendEmailResponseStatusQueued  SendEmailResponseStatus = "queued"
	SendEmailResponseStatusSending SendEmailResponseStatus = "sending"
	SendEmailResponseStatusSent    SendEmailResponseStatus = "sent"
)

// Defines values for ServiceStatusStatus.
const (
	Available   ServiceStatusStatus = "available"
	Maintenance ServiceStatusStatus = "maintenance"
	Unavailable ServiceStatusStatus = "unavailable"
)

// Error defines model for Error.
type Error struct {
	Code    int32                   `json:"code"`
	Details *map[string]interface{} `json:"details,omitempty"`
	Message string                  `json:"message"`
}

// GetEmailStatusResponse defines model for GetEmailStatusResponse.
type GetEmailStatusResponse struct {
	Error  *string                      `json:"error,omitempty"`
	Id     openapi_types.UUID           `json:"id"`
	SentAt *time.Time                   `json:"sent_at,omitempty"`
	Status GetEmailStatusResponseStatus `json:"status"`
}

// GetEmailStatusResponseStatus defines model for GetEmailStatusResponse.Status.
type GetEmailStatusResponseStatus string

// SendEmailRequest defines model for SendEmailRequest.
type SendEmailRequest struct {
	Body    string               `json:"body"`
	From    *openapi_types.Email `json:"from,omitempty"`
	Subject string               `json:"subject"`

	// TemplateId Optional template ID for template-based emails
	TemplateId *string             `json:"template_id,omitempty"`
	To         openapi_types.Email `json:"to"`
}

// SendEmailResponse defines model for SendEmailResponse.
type SendEmailResponse struct {
	Id      openapi_types.UUID      `json:"id"`
	Message *string                 `json:"message,omitempty"`
	Status  SendEmailResponseStatus `json:"status"`
}

// SendEmailResponseStatus defines model for SendEmailResponse.Status.
type SendEmailResponseStatus string

// ServiceStatus defines model for ServiceStatus.
type ServiceStatus struct {
	NextDowntime *struct {
		Duration  *string    `json:"duration,omitempty"`
		StartTime *time.Time `json:"start_time,omitempty"`
	} `json:"next_downtime,omitempty"`
	RateLimit struct {
		// Limit Maximum number of emails per minute
		Limit     *int       `json:"limit,omitempty"`
		Remaining *int       `json:"remaining,omitempty"`
		ResetAt   *time.Time `json:"reset_at,omitempty"`
	} `json:"rate_limit"`
	Status ServiceStatusStatus `json:"status"`
}

// ServiceStatusStatus defines model for ServiceStatus.Status.
type ServiceStatusStatus string

// BadRequest defines model for BadRequest.
type BadRequest = Error

// InternalError defines model for InternalError.
type InternalError = Error

// NotFound defines model for NotFound.
type NotFound = Error

// ServiceUnavailable defines model for ServiceUnavailable.
type ServiceUnavailable = Error

// TooManyRequests defines model for TooManyRequests.
type TooManyRequests = Error

// SendEmailJSONRequestBody defines body for SendEmail for application/json ContentType.
type SendEmailJSONRequestBody = SendEmailRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Send email
	// (POST /api/v1/email/send)
	SendEmail(w http.ResponseWriter, r *http.Request)
	// Get email status
	// (GET /api/v1/email/{id}/status)
	GetEmailStatus(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
	// Get service status
	// (GET /api/v1/status)
	GetServiceStatus(w http.ResponseWriter, r *http.Request)
	// Get service metrics
	// (GET /metrics)
	GetMetrics(w http.ResponseWriter, r *http.Request)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Send email
// (POST /api/v1/email/send)
func (_ Unimplemented) SendEmail(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get email status
// (GET /api/v1/email/{id}/status)
func (_ Unimplemented) GetEmailStatus(w http.ResponseWriter, r *http.Request, id openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get service status
// (GET /api/v1/status)
func (_ Unimplemented) GetServiceStatus(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get service metrics
// (GET /metrics)
func (_ Unimplemented) GetMetrics(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// SendEmail operation middleware
func (siw *ServerInterfaceWrapper) SendEmail(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SendEmail(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetEmailStatus operation middleware
func (siw *ServerInterfaceWrapper) GetEmailStatus(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetEmailStatus(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetServiceStatus operation middleware
func (siw *ServerInterfaceWrapper) GetServiceStatus(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetServiceStatus(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetMetrics operation middleware
func (siw *ServerInterfaceWrapper) GetMetrics(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMetrics(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/email/send", wrapper.SendEmail)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/email/{id}/status", wrapper.GetEmailStatus)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/status", wrapper.GetServiceStatus)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/metrics", wrapper.GetMetrics)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
